<div id="menu-shadow" ng-init="menuVisible = false" ng-show="menuVisible"></div>
<header ng-class="page.headerClass">
    <div id="menu-button" ng-click="menuVisible = !menuVisible" >
        <div ng-class="{'hamburger half': menuVisible, 'hamburger': !menuVisible}"></div>
    </div>
    
    <div id="breadcrumb">
        <div class="title">{[{page.title}]}</div>
        <div ng-show="page.secondaryTitle">
            <div class="arrow"></div>
            <div class="title secondary">{[{page.secondaryTitle}]}</div>
        </div>
    </div>
    
    <div id="search" ng-init="showSearch = false" ng-class="{'active' : showSearch}" 
         ng-show="page.searchEnabled">
        <div class="icon" 
             ng-click="showSearch = !showSearch; clearSearch(); menuVisible = false; focusSearch();"
             ng-disabled="menuVisible">
        </div>
        <input type="text" placeholder="Search" 
               ng-model="searchQuery" 
               ng-model-options="{debounce:500}"
               ng-show="showSearch"
               ng-disabled="menuVisible" />
    </div>
</header>

<div id="menu" ng-show="menuVisible" ng-include="'/partials/menu.html'" ng-controller="menuController">
</div>

<section class="viewport">
    <div id="mask" ng-show="menuVisible" ng-click="menuVisible = false"></div>
    <div ng-view class="ngview page" ng-class="page.class"></div>
</section>

<script>       
    
    // From http://stackoverflow.com/questions/3115982/how-to-check-javascript-array-equals
    function arraysEqual(a, b) {
      if (a === b) return true;
      if (a == null || b == null) return false;
      if (a.length != b.length) return false;

      for (var i = 0; i < a.length; ++i) {
        if (a[i] !== b[i]) return false;
      }
      return true;
    }
    
    var app = angular.module("app", ['ngRoute', 'ngAnimate', 'ngResource', 'truncate']);

    app.config(function($interpolateProvider) {
          $interpolateProvider.startSymbol('{[{');
          $interpolateProvider.endSymbol('}]}');
    });
    
    app.config(['$routeProvider',
        function($routeProvider) {
            $routeProvider.
            when('/', {
                templateUrl: 'partials/main.html',
                controller: 'masonController',
            }).
            when('/visualisations/:id', {
                templateUrl: 'partials/visualisation.html',
                controller: 'mainController',
            }).
            when('/submit/advert', {
                templateUrl: 'partials/submit-advert.html',
                controller: 'submitAdvertController',
            }).
            when('/submit/visualisation', {
                templateUrl: 'partials/submit-visualisation.html',
                controller: 'submitVisualisationController',
            }).               
            when('/moderate', {
                templateUrl: 'partials/moderate.html',
                controller: 'moderateController',
            }).
            when('/schedule', {
                templateUrl: 'partials/schedule.html',
                controller: 'scheduleController',
            }).
            otherwise({
                redirectTo: '/'
            });
      }]);

    app.controller('mainController', function($scope, $rootScope, $route) {


        $scope.clearSearch = function() { jQuery("#search input").val(""); }
            
        $scope.$on('$routeChangeSuccess', function(next, current) { 
            $scope.menuVisible = false;
         });
        
        $scope.focusSearch = function() {
            setTimeout(function() {
                $("#search input").focus()
            }, 500);
        }
        
    });
    
        
    app.factory('Visualisation', ['$resource',
        function($resource){
            return $resource('visualisations/:id.json', {id : "@id"}, {
                query: { method:'GET', url:'visualisations.json', isArray:true },
                approve: { method:'PATCH', url:'visualisations/:id/approve.json'},
                reject: { method:'PATCH', url:'visualisations/:id/reject.json'}
            });
    }]);
    
    app.factory('Timeslot', ['$resource',
        function($resource){
            return $resource('timeslots', {}, {
                query: { method:'GET', isArray:true },
            });
    }]);
    
    app.controller('menuController', function($scope, $rootScope, $route, $location) {
        
        $scope.user = { name: "Joe Bloggs", image: "http://api.randomuser.me/portraits/thumb/men/88.jpg", admin:true };

        $scope.visLinks = [{name : "Visualisations", url : "/", img:"visualisations.png"},
                           {name : "New", url : "", url : "/?newest=18", img:"ic_new_releases_black_24dp.png"},
                           {name : "Mine", url : "", img:"ic_person_black_24dp.png"}]
        
        $scope.contentLinks = [{name : "Submit Visualisation", class:"submit vis", url : "/submit/visualisation", img:"ic_add_box_black_24dp.png"},
                               {name : "Submit Advert", class : "submit advert", url : "/submit/advert", img:"ic_add_box_black_24dp.png"}]
        
        $scope.adminLinks = [{name : "Moderate Content", class:"moderate", url : "/moderate", img:"ic_check_box_black_24dp.png"},
                             {name : "Schedule Content", class : "schedule", url : "/schedule", img:"ic_timer_black_24dp.png"}]

        
        $scope.getQueryParameters = function(str) {
            var params = (str).replace(/(.*\?)|(.*)/, '').split("&").map(function(n){return n = n.split("="),this[n[0]] = n[1],this}.bind({}))[0];
            return arraysEqual(Object.keys(params), [""]) ? {} : params; 
        }
        
        $scope.isCurrentMenuItem = function(item) {
            return item.url.replace(/(\?.*)/, '') == $location.path() && 
                   arraysEqual(Object.keys($scope.getQueryParameters(item.url)), Object.keys($location.search()));
        }


    });

    app.controller('visController', function ($scope, $rootScope, Visualisation, $routeParams) {
        $rootScope.page = {title: "Visualisations",  headerClass:"visualisations", searchEnabled : false, class:"view-visualisation"}

        //Get ID from current URL
        var currentID = $routeParams.id;
        $scope.currentID = currentID;
        $scope.visualisation = Visualisation.get({ id : $scope.currentID });
        $scope.commentsname = "Joe Bloggs";
        $scope.commentsimage = "http://api.randomuser.me/portraits/thumb/men/88.jpg";
        $scope.commentstext = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.";
        $scope.commentsdate = "10/11/2014";
        
    });
    
    app.controller('submitAdvertController', function($scope, $rootScope, $route) {
        $rootScope.page = {title: "Submit Advert", headerClass:"submit-advert", searchEnabled : false, class:"submit"}
    });

    app.controller('submitVisualisationController', function($scope, $rootScope, $route) {
        $rootScope.page = {title: "Submit Visualisation",  headerClass:"submit-visualisation", searchEnabled : false, class:"submit"}
    });

    app.controller('moderateController', function($scope, $rootScope, $route) {
        $rootScope.page = {title: "Moderate Content",  headerClass:"moderate", searchEnabled : true, class:"moderate"}
    });
    
    app.controller('masonController', function($scope, $rootScope, Visualisation, $routeParams) {
        $rootScope.page = {title: "Visualisations",  headerClass:"visualisations", searchEnabled : true, class:"visualisations"}
    
        $scope.visItems = Visualisation.query($routeParams)
    });
    
    app.controller('scheduleController', function($scope, $rootScope, Timeslot) {
        $rootScope.page = {title: "Schedule Content",  headerClass:"schedule", class:"schedule"}
        $scope.days = [1, 2, 3, 4, 5, 6, 0]; // The make Monday start of week
        $scope.startOfWeek = moment().startOf('isoweek');
        $scope.activeTimeslot = null;
        
        $scope.timeslots = [ {startTime:"2014-11-13T10:00:00Z", endTime:"2014-11-13T11:00:00Z", visualisations: [1, 2, 3], adverts:[5, 6, 7]} ];
        //$scope.timeslots = Timeslot.query({startOfWeek: $scope.startOfWeek.format()});
        
        $scope.getShortWeekdayName = function(day) {
            return moment().day(day).format("ddd")   
        }
        
        $scope.formatWeek = function() {
            return $scope.startOfWeek.format("Do MMMM") + " - " +  $scope.startOfWeek.clone().add(7, "days").format("Do MMMM")
        }
        
        $scope.nextWeek = function() {
            $scope.startOfWeek.add(7, "days");
            //$scope.timeslots = Timeslot.query({startOfWeek: $scope.startOfWeek.format()});
        }   
        $scope.previousWeek = function() {
            $scope.startOfWeek.add(-7, "days");
            //$scope.timeslots = Timeslot.query({startOfWeek: $scope.startOfWeek.format()});
        }
        $scope.addTimeslot = function(day) {
               Timeslot.add({date: $scope.getDateForDay(day).format()}); 
        }
        $scope.removeTimeslot = function(day) {
            if ($scope.activeTimeslot != null) {
                Timeslot.remove({id: activeTimeslot.id});   
            }
        } 
        $scope.getDateForDay = function(day) {
            return $scope.startOfWeek.clone().add(day, "days");   
        }
    });

    app.controller('moderateController', function(Visualisation, $scope, $rootScope) {
        $rootScope.page = {title: "Moderate Content",  headerClass:"moderate", searchEnabled : true, class:"moderate"}
        
        $scope.content = Visualisation.query({needsModeration : 'true', expandUser: 'true'})
        
        $scope.fadeOutRow = function(childElement, item) {
            var row = $(childElement).parents("tr");
            row.animate({opacity: 0}, 250);
            setTimeout(function() { 
                // Add in another element which we can animate, so table rows do not 'jump' up
                var shrinker = $("<div/>").addClass("shrinker").css({width : "100%", height : row.css("height")});
                $(shrinker).insertAfter(row);
                row.remove(); 
                shrinker.slideUp(250);
                
                setTimeout(function() { 
                    shrinker.remove();
                    
                    // Remove content item from content
                    $scope.content.splice($scope.content.indexOf(item), 1);
                    
                    $scope.$apply();
                }, 250);
            }, 250)
        }
        
        
        $scope.approve = function(event, item) {
            Visualisation.approve({id : item.id})
            $scope.fadeOutRow(event.target);
        }
        
        $scope.reject = function(event, item) {
            Visualisation.reject({id : item.id})
            $scope.fadeOutRow(event.target, item);
        }

    });
    
    app.directive('horizontalScroll', function() {
    return {
        link: function(scope, element, attrs) {
            $(element).mousewheel(function(event, delta) {
              this.scrollLeft -= (delta * 30);
              event.preventDefault();
           });
        }
    }});
        
    app.directive('colorThief', function() {
        return {
            scope: {item:'='},

            controller: ['$scope', function($scope){
                $scope.setBackground = function(element, item) {
                    $(element).css("background-color", item.bg);
                    if (item.bgBright) {
                        $(element).addClass("bright-background");
                    }   
                };
            }],

            link: function(scope, element, attrs) {
                if (scope.item.bg == undefined) {               
                    var img = new Image();
                    img.src = scope.item.link;

                    $(img).on('load', function() {               
                        var color = new ColorThief().getColor(img);


                        var brightness = Math.sqrt( .241 * Math.pow(color[0], 2) + 
                                                    .691 * Math.pow(color[1], 2) + 
                                                    .068 * Math.pow(color[2], 2));

                        scope.item.bg = "rgb(" + color + ")";
                        scope.item.bgBright = brightness > 255/2;
                        scope.setBackground(element, scope.item);
                    });
                } else {
                    scope.setBackground(element, scope.item);   
                }
            }
        }; 
    }); 
    
    app.directive('timeslotEditor', function() {
        return {
            scope: {item:'='},
            controller: ['$scope', "$location", function($scope, $location) {
                $scope.editTimeslot = function(timeslot) {
                    $location.path('/schedule/timeslot/' + timeslot.id);  
                    $scope.$apply();
                }
            }],

            link: function(scope, element, attrs) {
                $(element).timesloteditor({ timeslotclicked : function(event, data) {
                    scope.editTimeslot(data.timeslot);
                }});
                $(element).timesloteditor("setStartTime", moment(attrs["startOfWeek"]).add(attrs["day"], "days"));
            }
        }; 
    }); 
</script>
;
